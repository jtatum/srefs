---
import { getImage } from 'astro:assets';
import { toCdnUrl } from '../lib/cdn-utils';

export interface Props {
  id: string;
  title: string;
  description?: string;
  tags: string[];
  coverImageUrl: string;
  coverImagePath?: string;
  path: string;
}

const { id, title, description, tags, coverImageUrl, coverImagePath, path } = Astro.props;

// Get all images dynamically using Vite's glob import
const imageModules = import.meta.glob('/src/data/srefs/*/images/*', { eager: true });

// Process image with Astro if we have a file path
let optimizedImage: any = null;
if (coverImagePath) {
  try {
    // Find the matching imported image module (remove ./ prefix from coverImagePath)
    const imageKey = `/src/${coverImagePath.replace('./data/', 'data/')}`;
    const imageModule = imageModules[imageKey];
    
    if (imageModule?.default) {
      // Create square thumbnail for card (consistent grid)
      // Try AVIF first (best compression), fallback to WebP
      try {
        optimizedImage = await getImage({
          src: imageModule.default,
          width: 400,
          height: 400,
          format: 'avif',
          quality: 80,
        });
      } catch (error) {
        // Fallback to WebP if AVIF fails
        optimizedImage = await getImage({
          src: imageModule.default,
          width: 400,
          height: 400,
          format: 'webp',
          quality: 80,
        });
      }
    }
  } catch (error) {
    console.warn(`Could not process image for sref ${id}:`, error);
  }
}

// Use optimized image if available, otherwise fall back to original URL
const imgSrc = optimizedImage?.src ? toCdnUrl(optimizedImage.src) : coverImageUrl;
const imgWidth = optimizedImage?.attributes?.width;
const imgHeight = optimizedImage?.attributes?.height;
---

<article class="group relative card overflow-hidden">
  <a href={path} class="block">
    <div class="aspect-square overflow-hidden bg-gray-100 relative">
      <img
        src={imgSrc}
        alt={title}
        loading="lazy"
        width={imgWidth}
        height={imgHeight}
        class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500 ease-out"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    </div>
    <div class="p-5 bg-white/95 dark:bg-transparent">
      <div class="flex items-start justify-between gap-2 mb-2">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-slate-200 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors leading-tight">
          {title}
        </h3>
        <code class="text-xs font-mono bg-indigo-50 text-indigo-800 dark:bg-indigo-900/40 dark:text-indigo-200 px-2.5 py-1 rounded-full border border-indigo-200/80 dark:border-indigo-800/60">
          {id}
        </code>
      </div>
      {description && (
        <p class="text-sm text-gray-600 dark:text-slate-400 mb-3 leading-relaxed line-clamp-2">
          {description}
        </p>
      )}
      <div class="flex flex-wrap gap-2">
        {tags.map((tag) => (
          <span class="chip">
            {tag}
          </span>
        ))}
      </div>
    </div>
  </a>
</article>
