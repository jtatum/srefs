---
import Layout from '../../layouts/Layout.astro';
import { getAllSrefs, getSrefById } from '../../lib/srefs';
import { getImage } from 'astro:assets';
import type { ProcessedSref } from '../../lib/types';
import { toCdnUrl } from '../../lib/cdn-utils';

export async function getStaticPaths() {
  const srefs = await getAllSrefs();
  return srefs.map((sref) => ({
    params: { id: sref.id },
    props: { sref },
  }));
}

const { sref } = Astro.props as { sref: ProcessedSref };

if (!sref) {
  return Astro.redirect('/404');
}

// Get all images dynamically using Vite's glob import
const imageModules = import.meta.glob('/src/data/srefs/*/images/*', { eager: true });

// Process images for responsive display
const optimizedImages = await Promise.all(
  sref.processedImages.map(async (image) => {
    try {
      // Find the matching imported image module (remove ./ prefix from filePath)
      const imageKey = `/src/${image.filePath.replace('./data/', 'data/')}`;
      const imageModule = imageModules[imageKey];
      
      if (!imageModule?.default) {
        console.warn(`Could not find image module for ${imageKey}`);
        return {
          ...image,
          optimizedSrc: '', // No URL available
          optimizedWidth: image.width,
          optimizedHeight: image.height,
          lightboxSrc: '', // No URL available
        };
      }

      // Create square gallery image for consistent grid (800x800)
      let gallery;
      try {
        gallery = await getImage({
          src: imageModule.default,
          width: 800,
          height: 800,
          format: 'avif',
          quality: 85,
        });
      } catch (error) {
        // Fallback to WebP if AVIF fails
        gallery = await getImage({
          src: imageModule.default,
          width: 800,
          height: 800,
          format: 'webp',
          quality: 85,
        });
      }

      // Create high-quality lightbox image (original dimensions, max 1600px)
      const lightbox = await getImage({
        src: imageModule.default,
        width: Math.min(image.width, 1600),
        height: Math.min(image.height, 1600),
        format: 'webp',
        quality: 95,
      });
      
      return {
        ...image,
        optimizedSrc: toCdnUrl(gallery.src),
        optimizedWidth: gallery.attributes?.width,
        optimizedHeight: gallery.attributes?.height,
        lightboxSrc: toCdnUrl(lightbox.src),
      };
    } catch (error) {
      console.warn(`Could not process image ${image.filename}:`, error);
      // If processing fails, return without optimized version
      return {
        ...image,
        optimizedSrc: '', // No URL available
        optimizedWidth: image.width,
        optimizedHeight: image.height,
        lightboxSrc: '', // No URL available
      };
    }
  })
);

// Generate optimized cover image for OG tags
let cover = '';
let ogImage: string | undefined = undefined;

if (sref.coverImagePath) {
  try {
    // Find the matching imported cover image module (remove ./ prefix from coverImagePath)
    const coverImageKey = `/src/${sref.coverImagePath.replace('./data/', 'data/')}`;
    const coverImageModule = imageModules[coverImageKey];
    
    if (coverImageModule?.default) {
      const coverOptimized = await getImage({
        src: coverImageModule.default,
        width: 1200,
        height: 630,
        format: 'webp',
        quality: 80,
      });
      cover = coverOptimized.src;
      ogImage = new URL(cover, Astro.site || Astro.url).toString();
    }
  } catch (error) {
    console.warn('Could not generate cover image:', error);
  }
} else if (optimizedImages.length > 0 && optimizedImages[0].optimizedSrc) {
  cover = optimizedImages[0].optimizedSrc;
  ogImage = new URL(cover, Astro.site || Astro.url).toString();
}
---

<Layout 
  title={`${sref.title} - Sref ${sref.id}`} 
  description={sref.description}
  ogTitle={`${sref.title} â€“ Sref ${sref.id}`}
  ogDescription={sref.description}
  ogImage={ogImage}
>
  <div class="max-w-7xl mx-auto">
    <!-- Enhanced Header Section -->
    <div class="relative mb-12">
      <!-- Decorative background elements -->
      <div class="absolute top-0 left-1/4 w-32 h-32 bg-gradient-to-br from-indigo-400/10 to-purple-400/10 rounded-full blur-3xl"></div>
      <div class="absolute top-8 right-1/3 w-24 h-24 bg-gradient-to-br from-pink-400/10 to-orange-400/10 rounded-full blur-2xl"></div>
      
      <div class="relative glass rounded-2xl p-8 border border-white/20">
        <div class="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6 mb-6">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-4">
              <h1 class="text-4xl lg:text-5xl font-bold bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 dark:from-indigo-300 dark:via-purple-300 dark:to-pink-300 bg-clip-text text-transparent leading-tight">
                {sref.title}
              </h1>
              <div class="flex-shrink-0">
                <code class="text-sm font-mono bg-gradient-to-r from-indigo-50 to-purple-50 text-indigo-700 px-4 py-2 rounded-full border border-indigo-200 dark:bg-indigo-900/40 dark:text-indigo-200 dark:border-indigo-800/60">
                  --sref {sref.id}
                </code>
              </div>
            </div>
            {sref.description && (
              <p class="text-xl text-gray-700 dark:text-gray-300 leading-relaxed max-w-3xl">
                {sref.description}
              </p>
            )}
          </div>
        </div>
        
        <!-- Enhanced Copy Button -->
        <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4">
          <button
            id="copy-btn"
            data-sref={sref.id}
            class="group relative inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold rounded-xl hover:from-indigo-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl"
            title="Copy --sref command to clipboard"
          >
            <div class="absolute inset-0 bg-gradient-to-r from-indigo-400/20 to-purple-400/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-200"></div>
            <svg class="relative w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            <span class="relative">Copy --sref {sref.id}</span>
          </button>
          
          {sref.created && (
            <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Added {new Date(sref.created).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </div>
          )}
        </div>
      </div>
      
      {sref.tags.length > 0 && (
        <div class="mt-8">
          <h3 class="text-lg font-semibold text-gray-800 dark:text-slate-200 mb-4">Style Tags</h3>
          <div class="flex flex-wrap gap-3">
            {sref.tags.map((tag) => (
              <span class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-full hover:border-indigo-200 hover:text-indigo-600 hover:bg-gray-50 transition-all duration-200 dark:text-slate-200 dark:bg-white/10 dark:border-white/15 dark:hover:bg-white/15 dark:hover:border-indigo-800/60">
                <svg class="w-3 h-3 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                </svg>
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>

    <!-- Enhanced Image Gallery -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold text-gray-800 dark:text-slate-200 mb-6">Example Images</h2>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {optimizedImages.map((image, index) => (
        <div class="group relative">
          <!-- Card Glow Effect -->
          <div class="absolute -inset-0.5 bg-gradient-to-r from-indigo-500/20 via-purple-500/20 to-pink-500/20 rounded-xl blur opacity-0 group-hover:opacity-100 transition-all duration-500"></div>
          
          <div class="relative glass rounded-xl overflow-hidden border border-white/20 group-hover:border-white/40 transition-all duration-300">
            <div 
              class="overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200 relative cursor-pointer"
              style={`aspect-ratio: 1`}
              data-lightbox="gallery"
              data-index={index}
              data-original-url={image.lightboxSrc}
            >
              <img
                src={image.optimizedSrc}
                alt={image.prompt || sref.title}
                loading="lazy"
                width={image.optimizedWidth}
                height={image.optimizedHeight}
                class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700 ease-out"
              />
              
              <!-- Image Overlay -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              
              <!-- Expand Icon -->
              <div class="absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0">
                <div class="p-2 bg-white/90 backdrop-blur-sm rounded-full shadow-lg">
                  <svg class="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4a2 2 0 012-2h4M4 16v4a2 2 0 002 2h4M16 4h4a2 2 0 012 2v4M16 20h4a2 2 0 002-2v-4" />
                  </svg>
                </div>
              </div>
              
              <!-- Image Index Badge -->
              <div class="absolute bottom-3 left-3 opacity-0 group-hover:opacity-100 transition-all duration-300">
                <div class="px-3 py-1 bg-black/50 backdrop-blur-sm text-white text-sm font-medium rounded-full">
                  {index + 1} of {sref.processedImages.length}
                </div>
              </div>
            </div>
            
            {image.prompt && (
              <div class="p-6">
                <div class="flex items-start gap-3">
                  <div class="flex-shrink-0 p-2 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg dark:from-indigo-900/30 dark:to-purple-900/30">
                    <svg class="w-4 h-4 text-indigo-600 dark:text-indigo-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                  </div>
                  <p class="text-sm text-gray-700 dark:text-slate-300 font-mono leading-relaxed flex-1">
                    {image.prompt}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>

    <!-- Enhanced Back Navigation -->
    <div class="mt-16 pt-8 border-t border-white/20">
      <div class="text-center">
        <a 
          href={import.meta.env.BASE_URL} 
          class="group inline-flex items-center gap-3 px-6 py-3 bg-white border border-gray-300 rounded-xl hover:border-indigo-200 text-gray-700 hover:text-indigo-600 transition-all duration-200 hover:shadow-md hover:bg-gray-50 dark:bg-white/5 dark:border-white/15 dark:text-slate-200 dark:hover:bg-white/10 dark:hover:border-indigo-800/60"
        >
          <svg class="w-5 h-5 transition-transform group-hover:-translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          <span class="font-medium">Back to Gallery</span>
        </a>
      </div>
    </div>
  </div>
</Layout>

<script>
  const copyBtn = document.getElementById('copy-btn');
  if (copyBtn) {
    copyBtn.addEventListener('click', async () => {
      const srefId = copyBtn.dataset.sref;
      const textToCopy = ` --sref ${srefId}`;
      
      try {
        await navigator.clipboard.writeText(textToCopy);
        
        // Enhanced success feedback
        copyBtn.innerHTML = `
          <div class="absolute inset-0 bg-gradient-to-r from-green-400/20 to-emerald-400/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-200"></div>
          <svg class="relative w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <span class="relative">Copied!</span>
        `;
        
        copyBtn.classList.remove('bg-gradient-to-r', 'from-indigo-600', 'to-purple-600');
        copyBtn.classList.add('bg-gradient-to-r', 'from-green-500', 'to-emerald-500');
        
        setTimeout(() => {
          copyBtn.innerHTML = `
            <div class="absolute inset-0 bg-gradient-to-r from-indigo-400/20 to-purple-400/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-200"></div>
            <svg class="relative w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            <span class="relative">Copy --sref ${srefId}</span>
          `;
          
          copyBtn.classList.remove('bg-gradient-to-r', 'from-green-500', 'to-emerald-500');
          copyBtn.classList.add('bg-gradient-to-r', 'from-indigo-600', 'to-purple-600');
        }, 2500);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  }

  function initLightbox() {
    const images = document.querySelectorAll('[data-lightbox="gallery"]');
    
    if (images.length === 0) {
      setTimeout(initLightbox, 100);
      return;
    }
    
    let currentImageIndex = 0;
    let lightboxModal = null;
    
    function openLightbox(index) {
      currentImageIndex = index;
      const currentContainer = images[currentImageIndex];
      
      // Use original image URL for lightbox (full quality)
      const originalImageUrl = currentContainer.dataset.originalUrl || currentContainer.querySelector('img').src;
      const altText = currentContainer.querySelector('img').alt;
      
      lightboxModal = document.createElement('div');
      lightboxModal.className = 'fixed inset-0 z-50 bg-black bg-opacity-95 flex items-center justify-center p-4';
      lightboxModal.style.animation = 'fadeIn 0.2s ease-out';
      
      lightboxModal.innerHTML = `
        <style>
          @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
          }
          @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
          }
          .lightbox-content {
            animation: slideIn 0.3s ease-out;
          }
        </style>
        <div class="lightbox-content relative max-w-full max-h-full flex items-center justify-center">
          <img 
            src="${originalImageUrl}" 
            alt="${altText}" 
            class="max-w-full max-h-[90vh] object-contain rounded-lg shadow-2xl"
            style="animation: slideIn 0.3s ease-out;"
          />
          
          <!-- Close Button -->
          <button class="lightbox-close absolute top-4 right-4 p-2 bg-black/50 backdrop-blur-sm rounded-full text-white hover:text-gray-300 hover:bg-black/70 transition-all duration-200">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          
          <!-- Navigation Buttons -->
          ${images.length > 1 ? `
            <button class="lightbox-prev absolute left-4 top-1/2 -translate-y-1/2 p-3 bg-black/50 backdrop-blur-sm rounded-full text-white hover:text-gray-300 hover:bg-black/70 transition-all duration-200 ${currentImageIndex === 0 ? 'opacity-50 cursor-not-allowed' : ''}">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button class="lightbox-next absolute right-4 top-1/2 -translate-y-1/2 p-3 bg-black/50 backdrop-blur-sm rounded-full text-white hover:text-gray-300 hover:bg-black/70 transition-all duration-200 ${currentImageIndex === images.length - 1 ? 'opacity-50 cursor-not-allowed' : ''}">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          ` : ''}
          
          <!-- Image Counter -->
          ${images.length > 1 ? `
            <div class="absolute bottom-4 left-1/2 -translate-x-1/2 px-4 py-2 bg-black/50 backdrop-blur-sm rounded-full text-white text-sm font-medium">
              ${currentImageIndex + 1} / ${images.length}
            </div>
          ` : ''}
        </div>
      `;
      
      // Add event listeners
      const closeBtn = lightboxModal.querySelector('.lightbox-close');
      const prevBtn = lightboxModal.querySelector('.lightbox-prev');
      const nextBtn = lightboxModal.querySelector('.lightbox-next');
      
      // Close on click outside image
      lightboxModal.addEventListener('click', (e) => {
        if (e.target === lightboxModal) {
          closeLightbox();
        }
      });
      
      // Close button
      if (closeBtn) {
        closeBtn.addEventListener('click', closeLightbox);
      }
      
      // Navigation buttons
      if (prevBtn && currentImageIndex > 0) {
        prevBtn.addEventListener('click', () => navigateImage(-1));
      }
      if (nextBtn && currentImageIndex < images.length - 1) {
        nextBtn.addEventListener('click', () => navigateImage(1));
      }
      
      // Keyboard navigation
      document.addEventListener('keydown', handleKeydown);
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
      
      document.body.appendChild(lightboxModal);
    }
    
    function closeLightbox() {
      if (lightboxModal) {
        lightboxModal.style.animation = 'fadeIn 0.2s ease-out reverse';
        setTimeout(() => {
          if (lightboxModal) {
            lightboxModal.remove();
            lightboxModal = null;
            document.body.style.overflow = '';
            document.removeEventListener('keydown', handleKeydown);
          }
        }, 200);
      }
    }
    
    function navigateImage(direction) {
      const newIndex = currentImageIndex + direction;
      if (newIndex >= 0 && newIndex < images.length) {
        closeLightbox();
        setTimeout(() => openLightbox(newIndex), 250);
      }
    }
    
    function handleKeydown(e) {
      switch (e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          if (currentImageIndex > 0) navigateImage(-1);
          break;
        case 'ArrowRight':
          if (currentImageIndex < images.length - 1) navigateImage(1);
          break;
      }
    }
    
    // Add click listeners to images
    images.forEach((container) => {
      const index = parseInt(container.getAttribute('data-index'));
      container.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        openLightbox(index);
      });
    });
  }
  
  // Try multiple initialization strategies
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLightbox);
  } else {
    initLightbox();
  }
  
  // Also try after a short delay
  setTimeout(initLightbox, 100);
</script>
