---
import Layout from '../../layouts/Layout.astro';
import { getAllSrefs, getSrefById } from '../../lib/srefs';
import type { ProcessedSref } from '../../lib/types';

export async function getStaticPaths() {
  const srefs = await getAllSrefs();
  return srefs.map((sref) => ({
    params: { id: sref.id },
    props: { sref },
  }));
}

const { sref } = Astro.props as { sref: ProcessedSref };

if (!sref) {
  return Astro.redirect('/404');
}
---

<Layout title={`${sref.title} - Sref ${sref.id}`} description={sref.description}>
  <div class="max-w-7xl mx-auto">
    <div class="mb-8">
      <div class="flex items-start justify-between mb-4">
        <div>
          <h1 class="text-4xl font-bold text-gray-900 mb-2">{sref.title}</h1>
          {sref.description && (
            <p class="text-lg text-gray-600">{sref.description}</p>
          )}
        </div>
        <div class="flex items-center gap-2">
          <code class="text-sm font-mono bg-gray-100 px-3 py-2 rounded flex items-center gap-2">
            --sref {sref.id}
            <button
              id="copy-btn"
              data-sref={sref.id}
              class="p-1 hover:bg-gray-200 rounded transition-colors"
              title="Copy to clipboard"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
            </button>
          </code>
        </div>
      </div>
      
      {sref.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-6">
          {sref.tags.map((tag) => (
            <span class="inline-block px-3 py-1 text-sm font-medium text-gray-700 bg-gray-100 rounded-full">
              {tag}
            </span>
          ))}
        </div>
      )}
      
      {sref.created && (
        <p class="text-sm text-gray-500">
          Added: {new Date(sref.created).toLocaleDateString()}
        </p>
      )}
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {sref.processedImages.map((image) => (
        <div class="group relative bg-white rounded-lg overflow-hidden shadow-md">
          <div 
            class="overflow-hidden bg-gray-100"
            style={`aspect-ratio: ${image.aspectRatio}`}
          >
            <img
              src={image.url}
              alt={image.prompt || sref.title}
              loading="lazy"
              class="w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform duration-300"
              data-lightbox="gallery"
            />
          </div>
          {image.prompt && (
            <div class="p-4">
              <p class="text-sm text-gray-600 font-mono">{image.prompt}</p>
            </div>
          )}
        </div>
      ))}
    </div>

    <div class="mt-12 pt-8 border-t border-gray-200">
      <a href="/" class="inline-flex items-center text-blue-600 hover:text-blue-700">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Gallery
      </a>
    </div>
  </div>
</Layout>

<script>
  const copyBtn = document.getElementById('copy-btn');
  if (copyBtn) {
    copyBtn.addEventListener('click', async () => {
      const srefId = copyBtn.dataset.sref;
      const textToCopy = `--sref ${srefId}`;
      
      try {
        await navigator.clipboard.writeText(textToCopy);
        copyBtn.innerHTML = `
          <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        `;
        setTimeout(() => {
          copyBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          `;
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  }

  const images = document.querySelectorAll('[data-lightbox="gallery"]');
  images.forEach(img => {
    img.addEventListener('click', () => {
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 p-4';
      modal.innerHTML = `
        <img src="${(img as HTMLImageElement).src}" alt="${(img as HTMLImageElement).alt}" class="max-w-full max-h-full object-contain" />
        <button class="absolute top-4 right-4 text-white hover:text-gray-300">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      `;
      
      modal.addEventListener('click', () => {
        modal.remove();
      });
      
      document.body.appendChild(modal);
    });
  });
</script>